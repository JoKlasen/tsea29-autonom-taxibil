
SensorModule.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000011e  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b9  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000814  00000000  00000000  00000afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021e  00000000  00000000  00001311  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001530  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000437  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d3  00000000  00000000  000019c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001a9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e1       	ldi	r30, 0x1E	; 30
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	27 d0       	rcall	.+78     	; 0x102 <main>
  b4:	32 c0       	rjmp	.+100    	; 0x11a <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <_Z5setupv>:
#define USART_BAUDRATE 9600
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)	

void setup()
{
	PORTD = (0 << PD5) |(0 << PD3) | (0 << PD2) | (1 << PD1) | (1 << PD0);
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	8b b9       	out	0x0b, r24	; 11
	// output == 1 input == 0
	DDRD = (1 << DDD5)|(1 << DDD4)| (0 << DDD3) | (0 << DDD2) | (1 << DDD1) | (0 << DDD0);
  bc:	82 e3       	ldi	r24, 0x32	; 50
  be:	8a b9       	out	0x0a, r24	; 10
	
	//UART
	
	/* Set baud rate */ 
	
	UBRR0H = (BAUD_PRESCALE>>8);
  c0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALE;
  c4:	87 e6       	ldi	r24, 0x67	; 103
  c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ca:	88 e1       	ldi	r24, 0x18	; 24
  cc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00)|(0<<UPM00)|(0<<UPM01);
  d0:	8e e0       	ldi	r24, 0x0E	; 14
  d2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  d6:	08 95       	ret

000000d8 <_Z9send_dataPc>:

}

void send_data(char* data)
{
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	dc 01       	movw	r26, r24
	int counter=0;
	while(1)
	{
		while(!( UCSR0A & (1<<UDRE0)))
  de:	e0 ec       	ldi	r30, 0xC0	; 192
  e0:	f0 e0       	ldi	r31, 0x00	; 0
		;
	
		UDR0 = data[counter];
  e2:	26 ec       	ldi	r18, 0xC6	; 198
  e4:	30 e0       	ldi	r19, 0x00	; 0
void send_data(char* data)
{
	int counter=0;
	while(1)
	{
		while(!( UCSR0A & (1<<UDRE0)))
  e6:	90 81       	ld	r25, Z
  e8:	95 ff       	sbrs	r25, 5
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <_Z9send_dataPc+0xe>
  ec:	ad 01       	movw	r20, r26
		;
	
		UDR0 = data[counter];
  ee:	8d 91       	ld	r24, X+
  f0:	e9 01       	movw	r28, r18
  f2:	88 83       	st	Y, r24
		if (data[counter] == '\0')
  f4:	ea 01       	movw	r28, r20
  f6:	88 81       	ld	r24, Y
  f8:	81 11       	cpse	r24, r1
  fa:	f5 cf       	rjmp	.-22     	; 0xe6 <_Z9send_dataPc+0xe>
			break;
		}		
		counter++;

	}
}
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <main>:

int main()
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	00 d0       	rcall	.+0      	; 0x108 <main+0x6>
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
	setup();
 10c:	d5 df       	rcall	.-86     	; 0xb8 <_Z5setupv>
	volatile int a= 0;
 10e:	1a 82       	std	Y+2, r1	; 0x02
 110:	19 82       	std	Y+1, r1	; 0x01
	char* Data= "Hello World! :)";
    /* Replace with your application code */
	send_data(Data);
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	e0 df       	rcall	.-64     	; 0xd8 <_Z9send_dataPc>
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0x16>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
